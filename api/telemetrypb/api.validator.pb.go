// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetrypb/api.proto

package telemetrypb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _regex_Any_TypeUrl = regexp.MustCompile(`^percona\.telemetry\.events\.\w+\.v1\.\w+Event$`)

func (this *Any) Validate() error {
	if !_regex_Any_TypeUrl.MatchString(this.TypeUrl) {
		return github_com_mwitkow_go_proto_validators.FieldError("TypeUrl", fmt.Errorf(`value '%v' must be a string conforming to regex "^percona\\.telemetry\\.events\\.\\w+\\.v1\\.\\w+Event$"`, this.TypeUrl))
	}
	return nil
}
func (this *Event) Validate() error {
	if !(len(this.Id) == 16) {
		return github_com_mwitkow_go_proto_validators.FieldError("Id", fmt.Errorf(`value '%v' must have a length equal to '16'`, this.Id))
	}
	if nil == this.Time {
		return github_com_mwitkow_go_proto_validators.FieldError("Time", fmt.Errorf("message must exist"))
	}
	if this.Time != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Time); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Time", err)
		}
	}
	if nil == this.Event {
		return github_com_mwitkow_go_proto_validators.FieldError("Event", fmt.Errorf("message must exist"))
	}
	if this.Event != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Event); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Event", err)
		}
	}
	return nil
}
func (this *ReportRequest) Validate() error {
	if len(this.Events) < 1 {
		return github_com_mwitkow_go_proto_validators.FieldError("Events", fmt.Errorf(`value '%v' must contain at least 1 elements`, this.Events))
	}
	for _, item := range this.Events {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Events", err)
			}
		}
	}
	return nil
}
func (this *ReportResponse) Validate() error {
	return nil
}
